service: cms-config-api

package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or falls back to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  configTableName: ${self:custom.stage}-cmsConfigs
  pageConfigTableName: ${self:custom.stage}-cmsPageConfigs

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

  # These environment variables are made available to our functions
  # under process.env
  environment:
    configTableName: ${self:custom.configTableName}
    pagConfigTableName: ${self:custom.pageConfigTableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ ConfigTable, Arn ]
        - "Fn::GetAtt": [ PageConfigTable, Arn ]

functions:
  getConfig:
    handler: get.main
    events:
      - http:
          path: config/{id}
          method: get
          cors: true
  listPageConfigs:
    handler: list.main
    events:
      - http:
          path: pages/{id}
          method: get
          cors: true

# Create our resources with separate CloudFormation templates
resources:
  - ${file(resources/api-gateway-errors.yml)}
  - ${file(resources/dynamodb-table.yml)}
